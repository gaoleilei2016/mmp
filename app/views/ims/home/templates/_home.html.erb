<style type="text/css">
#prescription_header{font-size: 12px;padding: 8px;}
#prescription_header .title{font-size: 21px;}
#prescription_header .header-right-btns{position: absolute; right:12px; bottom:8px; text-align: right; }
.router-view-content{padding-left:0;}
#side_menu{border-right:1px solid #ddd;}
#side_menu > div{
	padding:8px;
	border-bottom:1px solid #ddd;
}
#side_menu i{
	padding:4px;
	font-size: 1.2em;
}
body > .container{
  padding: 40px 0px 41px;
}

</style>
<template id="home_div">
	<div id="ims_order_main">

		<el-menu default-active="1-4-1" id="prescription_menu" class="el-col-4 el-menu-vertical-demo" @open="handleOpen" @close="handleClose" :collapse="isCollapse">

		  <el-menu-item index="1" route="this.$router.push">
		    <i class="el-icon-setting"></i>
		    <span slot="title">导航1</span>
		  </el-menu-item>

		  <el-menu-item index="2" @route="this.$router.push">
		    <i class="el-icon-setting"></i>
		    <span slot="title">导航2</span>
		  </el-menu-item>

		  <el-menu-item index="3" route="this.$router.push">
		    <i class="el-icon-setting"></i>
		    <span slot="title">导航3</span>
		  </el-menu-item>

		</el-menu>

		<div clas="el-col-20" style="height:100%;">
			<%= render "ims/home/render/out_order"%>
			<%#= render "ims/home/render/return_order"%>
			<%#= render "ims/home/render/order_reports"%>
		</div>

	</div>
</template>
<script type="text/javascript">
const home = Vue.extend({
	template: '#home_div',
	activated:function(){
		// window.apps.header_and_footer.header_selected_tab = '#/home';
	},
	data:function(){
		return {
			isCollapse: false,
			pres:[],
			input21: '',
			token:"<%= %>",
			dialogFormVisible: false,
			dialogFormVisible: false,
			tableData_plat:[],
        form: {
          name: '',
        },
        formLabelWidth: '120px',
			detail:[{
				header:{},
				lines:[{}]
			}],
			activeCollapse: "pre_info",
			activeTab: "histories",
		}
	},
	methods:{
      handleOpen:function(key, keyPath) {
        console.log(key, keyPath);
      },
      handleClose:function(key, keyPath) {
        console.log(key, keyPath);
      },		
		handleSelectionChange:function(val) {
      this.multipleSelection = val;
    },
    handleCurrentChange:function(val) {
    	this.currentRow = val;
    },
    create_search_order:function(row){
    	current = this.currentRow
    	multiple = this.multipleSelection
    	_this = this
    	if (multiple&&multiple.length>0) {
    		temp = []
    		$.each(multiple,function(k,v){
	    		temp.push({id:v.id,code:v.code, name:v.name, amount:v.amount})
    		})
	    	data = {authenticity_token:"<%= form_authenticity_token %>",order:temp}
	    	var successFun = function(response){
	    		try{
			    	_this.set_pres(response.data)
	    		}catch(e){
	    			console.log(e)
	    		}
		      _this.dialogFormVisible = false
	    	};
	    	var errorFun = function(response){
	    		_this.$message('订单创建失败，请重试！');
	    	};
	    	Vue.http.post("/ims/orders/create_order",data).then(successFun,errorFun)
    	}else{
    		_this.$message('请选择要生成订单的数据！');
    	}
    },		
		search_platform_pre:function(val){
			if (!val) {val = ""};
     var successCallback =  function(response) {
        this._data.tableData_plat = response.data
      }
      var errorCallback =  function(response){
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      }
      this.$http.get('/ims/orders/get_orders?platform='+val).then(successCallback,errorCallback);
		},
		search:function(val){
			if (!val) {val = ""};
			stat = $(".prescription_list_fun").find("list_fun_panel.active").attr("stat")||""
     var successCallback =  function(response) {
        this._data.tableData_plat = response.data
      }
      var errorCallback =  function(response){
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      }
      this.$http.get('/ims/orders/get_orders?stat='+stat+'&search='+val).then(successCallback,errorCallback);
		},
    get_pres:function (stat,e) {
    	$(e.currentTarget).addClass("active").siblings("div").removeClass("active")
    	if (!stat) {stat=""};
     var successCallback =  function(response) {
        this.set_pres(response.data)
      }
      var errorCallback =  function(response){
      	this.set_pres()
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      }
      this.$http.get('/ims/orders/get_orders?stat='+stat).then(successCallback,errorCallback);
    },
    set_pres:function(data){
    	this._data.pres = data
    	setTimeout(function(){$(".prescription_list").find("p:first").click()},300)
    },
    get_pre:function (stat,e) {
    	$(e.currentTarget).addClass("active").siblings("p").removeClass("active")
    	if (!stat) {stat=""};
     var successCallback =  function(response) {
        this._data.detail = response.data
      }
      var errorCallback =  function(response){
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      }
      this.$http.get('/ims/orders/get_order?sta='+stat).then(successCallback,errorCallback);
    },
    //发药  发订单
    out_order:function(id){
    	this.oprate_order({id:id,method:"dispensing_order",todo:"发药"})
    },
    //拒绝
   //  refuse_order:function(id){
			// this.oprate_order({id:id,method:"refuse_order",todo:"拒绝"})   	
   //  },
    //审核
		// check_order:function(id){
		// 	this.oprate_order({id:id,method:"check_order",todo:"审核"})		
		// },
		//退药
		return_order:function(id){
			this.oprate_order({id:id,method:"return_order",todo:"退药"})	
		},
		oprate_order:function(data){
    	if (data.id&&data.id.length>0){}else{
        this.$notify({
          title: '提示',
          message: '订单信息不全，不能发药！',
        });    		
    		return false
    	}
     var successCallback =  function(response) {
     		stat = response.data.flag ? true : false
     		type = stat ? "success" : "warning";
     		str = 
	     	this.$notify({
	     		title: '提示',
          message: data.todo+(stat ? "成功" : "失败"),
          type:type,
          duration:(stat ? 4500 : 0)
        })
      }
      var errorCallback =  function(response){
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      }			
			this.$http.get('/ims/orders/'+data.method+'?id='+data.id).then(successCallback,errorCallback);
		},
    format_time:function(data){
	  	var time = new Date(data)
	  	if (data) {
		    return time.toLocaleDateString().replace(/\//g,"-")+" "+time.toTimeString().slice(0,5)
	  	}else{
	  		return ""
	  	}
    },
    format_price:function(data){
			if (data) {
				return Number(data)==NaN ? 0.00 : parseFloat(data).toFixed(2)
			}else{
				return ""
			}
    },
    fix_diagnoses:function(data){
			try{
				if (typeof(data.join())==Object) {
					return ""
				}else{
					return data.join();
				}
			}catch(err){
				return ""
			}
    }
	},
	mounted:function(){
		// this.$nextTick(function(){
		// 	this.init();
		// })	
	}
// }
})
</script>
