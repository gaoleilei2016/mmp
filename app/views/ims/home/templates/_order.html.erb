<style type="text/css">
#prescription_header{font-size: 12px;padding: 8px;}
#prescription_header .title{font-size: 21px;}
#prescription_header .header-right-btns{position: absolute; right:12px; bottom:8px; text-align: right; }
.router-view-content{padding:0;}
#side_menu{border-right:1px solid #ddd;}
#side_menu > div{
	padding:8px;
	border-bottom:1px solid #ddd;
}
#side_menu i{
	padding:4px;
	font-size: 1.2em;
}
body > .container{
  padding: 40px 0px 41px;
}
.el-table th, .el-table td{
	padding:8px 0px;
}
#ims_order_main .el-menu span,#ims_order_main .el-menu i{display: block;}
#ims_order_main .el-menu-item {padding:0;padding-left:0px!important;padding-top:6px; text-align: center;}
#ims_order_main .el-menu span{padding-top:6px; line-height: 12px;}
#ims_order_main .el-menu i{width:auto;margin-right:0px;}
#ims_order_main .prescription-info .padding {padding-left:12px; padding-right:12px;}
#ims_order_main .prescription-info .el-collapse-item__content {padding-bottom:0px;}
</style>
<template>

	<div id="ims_order_main">

		<el-menu default-active="1-4-1" id="prescription_menu" class="el-col-4 el-menu-vertical-demo" @open="handleOpen" @close="handleClose" :collapse="isCollapse" style="rgb(56,73,91)">

		  <el-menu-item index="1" @click="show_panel('out_order')">
		    <i class="el-icon-goods"></i>
		    <span slot="title">发药</span>  
		  </el-menu-item>

		  <el-menu-item index="2" @click="show_panel('return_drug')">
		    <i class="el-icon-sold-out"></i>
		    <span slot="title">退药</span>  
		  </el-menu-item>

		  <el-menu-item index="3" @click="show_panel('reports')">
		    <i class="el-icon-document"></i>
		    <span slot="title">报表</span>
		  </el-menu-item>

		  <el-menu-item index="4" @click="show_panel('settings')">
		    <i class="el-icon-setting"></i>
		    <span slot="title">设置</span>
		  </el-menu-item>
		  
		</el-menu>

		<div class="function_panel out_order" style="height:100%;">
			<%= render "ims/home/render/out_order"%>
		</div>

		<div class="function_panel return_drug" style="height:100%;display:none;">
			<%= render "ims/home/render/return_drug"%>
		</div>

		<div class="function_panel reports" style="height:100%;display:none;">
			<%= render "ims/home/render/order_reports"%>
		</div>

		<div class="function_panel settings" style="height:100%;display:none;">
			<%= render "ims/home/render/settings"%>
		</div>

	</div>
</template>
<script type="text/javascript">
window.current_template_obj = {
	data:function(){
		return {
			isCollapse: false,
      return_pres:[],
      return_detail:[],
			pres:[],
      pre_detail:[],
			detail:[{is_order:true}],
      activeName2:"1",
      return_activeName2:"5",
      tab_header: '0', return_tab_header: '0',
      tab_header_data: [],
      input21: '',
      setting: {},
      options:[{value:"yes",label:"是"},{value:"no",label:"否"}],
      token:"<%= %>",
      dialogFormVisible: false,
      tableData_plat:[],
      platform_data:[],
        form: {
          name: '',
        },
        formLabelWidth: '120px',
			rules: {
				validity: [
		      { required: true, message: '效期不能为空'},
		    ],
				voice: [
		      { required: true, message: '请选择语音'},
		    ]
			},
			activeTab: "histories",
			tableData3: [],

      pickerOptions2: {
        shortcuts: [{
          text: '最近一周',
          onClick:function(picker) {
            const end = new Date();
            const start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
            picker.$emit('pick', [start, end]);
          }
        }, {
          text: '最近一个月',
          onClick:function(picker) {
            const end = new Date();
            const start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
            picker.$emit('pick', [start, end]);
          }
        }, {
          text: '最近三个月',
          onClick:function(picker) {
            const end = new Date();
            const start = new Date();
            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
            picker.$emit('pick', [start, end]);
          }
        }]
      },
      value6: '',
      value7: '',
      report_type:[]
		}
	},
	methods:{
    init:function(){
      $("div.list_fun_panel[stat='1']").addClass("active");
      stat = "1"
      this.$http.get('/ims/orders/get_orders?stat='+stat).then(function(response){
        this._data.pres =response.data.data;
      },this.errorCallback);
    },
    handleClick:function(tab, event) {
      if (tab.index == "0") {
        this.get_pres('1')
      }else if (tab.index == "1") {
        this.get_pres('2')
      };      
    },
    return_handleClick:function(tab, event) {
      if (tab.index == "0") {
        this.get_pres('5')
      }else if (tab.index == "1") {
        this.get_pres('7')
      };      
    },
    errorCallback:function(response){
      this.$notify({
        title: '提示',
        message: '服务器请求出错了',
        duration: 0
      });
    },
		show_panel:function(method){
      var _this = this
      $("div.function_panel").hide();
      var str = "div.function_panel."+method
      $(document).find(str).show();
      try{
        $(document).find(str).find(".is-active").click();
      }catch(e){
        _this._data.pres = []
        console.log(e)
      }
		},
		choose_prescription:function(){
			number = this.tab_header
			tab_val = this.tab_header_data[number]
      this._data.detail = [tab_val]
    },
    return_choose_prescription:function(){
      number = this.return_tab_header
      tab_val = this.tab_header_data[number]
      this._data.detail = [tab_val]
    },    
      handleOpen:function(key, keyPath) {
        console.log(key, keyPath);
      },
      handleClose:function(key, keyPath) {
        console.log(key, keyPath);
      },		
		handleSelectionChange:function(val) {
      this.multipleSelection = val;
    },
    handleCurrentChange:function(val) {
    	this.currentRow = val;
    },
    create_search_order:function(row){
    	current = this.currentRow
    	multiple = this.multipleSelection
    	_this = this
    	if (multiple&&multiple.length>0) {
    		temp = []
    		$.each(multiple,function(k,v){
	    		temp.push({id:v.id,code:v.code, name:v.name, amount:v.amount})
    		})
	    	data = {authenticity_token:"<%= form_authenticity_token %>",order:temp}
	    	Vue.http.post("/ims/orders/create_order",data).then(function(response){
          try{
            _this.set_pres(response.data)
          }catch(e){
            console.log(e)
          }
          _this.dialogFormVisible = false
        },function(response){
          _this.$message('订单创建失败，请重试！');
        })
    	}else{
    		_this.$message('请选择要生成订单的数据！');
    	}
    },		
		search_platform_pre:function(val){
			if (!val) {val = ""};
      this.$http.get('/ims/orders/get_orders?platform='+val).then(function(response) {
        this._data.tableData_plat = response.data
      },function(response){
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      });
		},
		search:function(e){
      var _this = this
      value = e.srcElement._value
			stat = Number(this.tab_header)+1
      this.$http.get('/ims/orders/get_search_data?stat='+stat+'&search='+value).then(function(response) {
        temp = []
        flag_arr = []
        flag = true
        ori_data = response.data
        if (ori_data[0]&&ori_data[0].r_status<0) {
          _this.$notify({
            title: '提示',
            message: '没有数据！',
          });
          return ""
        };
        if(ori_data&&ori_data.length>0){
          data1 = ori_data[0]
          flag_arr.push(data1.r_status)
          temp.push({
            id:data1.cfid,
            order_id:data1.order_id,
            order_type:data1.order_type,
            order_code:data1.order_code,
            pre_code:data1.prescription_no,
            name:data1.name,
            age:data1.age,
            sex:data1.gender_display,
            address:data1.address,
            iden:data1.iden,
            phone:data1.phone,
            status:data1.cfstatus,
            lines:[{
              name:data1.title,
              specification:data1.specification,
              qty:data1.single_qty_value,
              unit:data1.single_qty_unit,
            }]
          })
          if (ori_data.length>1) {
            for(i=1;i<ori_data.length;i++){
              for_data = ori_data[i]
              flag_arr.push(for_data.r_status)
              inter:
              for(j=0;j<temp.length;j++){
                if (temp[j].id == for_data.cfid) {
                  temp[j].lines.push({
                    name:for_data.title,
                    specification:for_data.specification,
                    qty:for_data.single_qty_value,
                    unit:for_data.single_qty_unit,                    
                  })
                  break inter;
                }else{
                  if (j == temp.length-1) {
                    temp.push({
                      id:for_data.cfid,
                      order_id:for_data.order_id,
                      order_type:for_data.order_type,
                      order_code:for_data.order_code,                      
                      pre_code:for_data.prescription_no,
                      name:for_data.name,
                      age:for_data.age,
                      sex:for_data.gender_display,
                      address:for_data.address,
                      iden:for_data.iden,
                      phone:for_data.phone,
                      status:data1.cfstatus,
                      lines:[{
                        name:for_data.title,
                        specification:for_data.specification,
                        qty:for_data.single_qty_value,
                        unit:for_data.single_qty_unit,
                      }]
                    })
                  };
                  
                }
              }
            }
          };

          console.log(flag_arr)

          if (flag_arr.indexOf(1)>=0) {
            temp2 = []
            stat = _this.activeName2
            temp.map(function(item){
              if (item.status == stat) {
                temp2<<{
                  order_id:item.order_id,
                  order_code:item.order_type,
                  patient_name:item.name,
                  amt:""
                }
              };
            })
            _this._data.pres = temp2
          }else if(flag_arr.indexOf(99)>=0){
            _this._data.platform_data = temp
            _this._data.dialogFormVisible = true
          }
        }else{
          _this.$notify({
            title: '提示',
            message: '没有数据！',
          });          
        }
      },function(response){
        _this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      });
		},
    get_pres:function (stat,e) {
      $(".prescription_list").find(".active").removeClass("active")
      this._data.tab_header_data = []
      this._data.detail = [{is_order:true}]
    	if (!stat) {stat=""};
      this.$http.get('/ims/orders/get_orders?stat='+stat).then(function(response) {
        if(response.data.data&&response.data.data.length>0){this.set_pres(response.data.data)}else{this.set_pres([])}
      },function(response){
        this.set_pres()
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      });
    },
    set_pres:function(data){
      if (data) {
        this._data.pres = data
      }else{
      	this._data.pres = []
      }
    },
    get_pre:function (id,e) {
    	var _this = this;
      _this._data.tab_header = '0'
      _this._data.tab_header_data = []
      _this._data.detail = [{is_order:true}]  
    	if(e)$(e.currentTarget).addClass("active").siblings("p").removeClass("active")
    	if (!id) {
    		id="";
        _this.$notify({
          title: '提示',
          message: '订单信息不全！',
          duration: 0
        });
        return ""
    	};
      _this.$http.get('/ims/orders/get_order?id='+id).then(function(response) {
        console.log(response.data.data)
        _this._data.tab_header_data = response.data.data
        setTimeout(function(){  _this._data.detail =  [_this.tab_header_data[0]] },300)
      },function(response){
        _this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      });
    },
    get_detail:function (id,e) {
    	if(e)$(e.currentTarget).addClass("active").siblings("p").removeClass("active")
    	if (!id) { id="";     this.$notify({ title: '提示', message: '服务器请求出错了', duration: 0 });
        return ""
    	};
      this.$http.get('/ims/orders/get_detail?id='+id).then(function(response) {
        this._data.detail = response.data
      },function(response){
        this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      });
    },

    //收费 
    charging_pre:function(id){
      this.oprate_order({id:id,method:"charging_pre",todo:"收费"})
    },
    //发药  发订单
    out_order:function(id){
    	this.oprate_order({id:id,method:"dispensing_order",todo:"发药"})
    },

		//退药
		return_drug:function(id){
			this.oprate_order({id:id,method:"return_drug",todo:"退药"})	
		},
    //平台搜索  收费
    platform_charging_fun:function(){
      var _this = this
      var boxs = $(".platform_search_dialog").find("[type='checkbox']:checked")
      var ids = []
      $.each(boxs,function(k,v){
        ids.push($(v).val())
      })
      if(ids&&ids.length>0){}else{
        _this.$message('没有数据！');
        return false;
      }
        data = {authenticity_token:"<%= form_authenticity_token %>",prescription_ids:ids,status:"2"}
        Vue.http.post("/ims/orders/operat_order_by_prescription",data).then(function(response){
          _this.$message('收费成功');
          _this.dialogFormVisible = false
          _this._data.platform_data = []
        },function(response){
          _this.$message('收费失败，请重试！');
        })
    },
    //平台搜索  收费+发药
    platform_charging_and_out_fun:function(){
      var _this = this
      var boxs = $(".platform_search_dialog").find("[type='checkbox']:checked")
      var ids = []
      $.each(boxs,function(k,v){
        ids.push($(v).val())
      })
      if(ids&&ids.length>0){}else{
        _this.$message('没有数据！');
        return false;
      }      
        data = {authenticity_token:"<%= form_authenticity_token %>",prescription_ids:ids,status:"5"}
        Vue.http.post("/ims/orders/operat_order_by_prescription",data).then(function(response){
          _this.$message('收费并发药成功');
          _this.dialogFormVisible = false
          _this._data.platform_data = []
        },function(response){
          _this.$message('收费并发药失败，请重试！');
        })
    },    
		oprate_order:function(data){
      var _this = this
    	if (data.id){}else{
        _this.$notify({
          title: '提示',
          message: '订单信息不全，不能发药！',
        });    		
    		return false
    	}
			_this.$http.get('/ims/orders/'+data.method+'?id='+data.id).then(function(response) {
        stat = response.data.flag ? true : false
        type = stat ? "success" : "warning";
        // $(document).find("div.function_panel.out_order").find(".is-active").click()
        _this._data.tab_header_data = []
        _this._data.detail = [{is_order:true}]
        _this.$notify({
          title: '提示',
          message: data.todo+(stat ? "成功" : "失败"),
          type:type,
          duration:(stat ? 4500 : 0)
        })
      },function(response){
        _this.$notify({
          title: '提示',
          message: '服务器请求出错了',
          duration: 0
        });
      });
		},
    format_time:function(data){
	  	var time = new Date(data)
	  	if (data) {
		    return time.toLocaleDateString().replace(/\//g,"-")+" "+time.toTimeString().slice(0,5)
	  	}else{
	  		return ""
	  	}
    },
    format_price:function(data){
			if (data) {
				return Number(data)==NaN ? 0.00 : parseFloat(data).toFixed(2)
			}else{
				return ""
			}
    },
    fix_diagnoses:function(data){
			try{
				if (typeof(data.join())==Object) {
					return ""
				}else{
					return data.join();
				}
			}catch(err){
				return ""
			}
    }
	},
	mounted:function(){
		this.$nextTick(function(){
			this.init();
		})	
	}
}
</script>
